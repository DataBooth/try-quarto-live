{
 "cells": [
  {
   "cell_type": "raw",
   "metadata": {
    "vscode": {
     "languageId": "raw"
    }
   },
   "source": [
    "---\n",
    "title: \"DuckDB with Python Example in Quarto Live\"\n",
    "format: \n",
    "  live-html:\n",
    "    code-tools: true\n",
    "jupyter: python3\n",
    "---"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {},
   "outputs": [],
   "source": [
    "import duckdb\n",
    "import pandas as pd\n",
    "import matplotlib.pyplot as plt"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "The answer is: [(42,)]\n"
     ]
    }
   ],
   "source": [
    "#| standalone: true\n",
    "#| components: [editor, viewer]\n",
    "\n",
    "con = duckdb.connect()\n",
    "result = con.execute(\"SELECT 42 AS answer\").fetchall()\n",
    "print(\"The answer is:\", result)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Sales by Product:\n",
      "    product  total_sales\n",
      "0  Widget B       376.25\n",
      "1  Widget C       300.00\n",
      "2  Widget A       250.75\n"
     ]
    },
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 1000x600 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "con1 = duckdb.connect(':memory:')\n",
    "\n",
    "# Create a sample table\n",
    "con1.execute(\"\"\"\n",
    "    CREATE TABLE sales (\n",
    "        date DATE,\n",
    "        product VARCHAR,\n",
    "        amount DECIMAL(10, 2)\n",
    "    )\n",
    "\"\"\")\n",
    "\n",
    "# Insert some sample data\n",
    "con1.execute(\"\"\"\n",
    "    INSERT INTO sales VALUES\n",
    "    ('2023-01-01', 'Widget A', 100.50),\n",
    "    ('2023-01-02', 'Widget B', 200.75),\n",
    "    ('2023-01-03', 'Widget A', 150.25),\n",
    "    ('2023-01-04', 'Widget C', 300.00),\n",
    "    ('2023-01-05', 'Widget B', 175.50)\n",
    "\"\"\")\n",
    "\n",
    "# Query the data\n",
    "result = con1.execute(\"\"\"\n",
    "    SELECT product, SUM(amount) as total_sales\n",
    "    FROM sales\n",
    "    GROUP BY product\n",
    "    ORDER BY total_sales DESC\n",
    "\"\"\").fetchdf()\n",
    "\n",
    "# Display the results\n",
    "print(\"Sales by Product:\")\n",
    "print(result)\n",
    "\n",
    "# Create a bar plot\n",
    "plt.figure(figsize=(10, 6))\n",
    "plt.bar(result['product'], result['total_sales'])\n",
    "plt.title('Total Sales by Product')\n",
    "plt.xlabel('Product')\n",
    "plt.ylabel('Total Sales')\n",
    "plt.show()\n",
    "\n",
    "# Close the connection\n",
    "con1.close()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": ".venv",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.11.10"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
